// abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`~!@#$%^&*()-_=+[]{}|\;':",./<>?

// init
val 1000 --> r3

// characters
val 30 --> r1
call WriteChar

val 0 --> r1 
call WriteChar 

val  123 --> r1
call CountDigits

val 163 --> r1
call WriteNum

exit

// subroutine
WriteChar:
{
    mov r1 --> [r3]
    add r3 2 --> r3
}

// subroutine
WriteNum: 
{
    call CountDigits
    // val 2010 --> r3
    mov [1998] --> r2
    add r3 r2 --> r3
    mov r3 --> [2010] // adds the buffer to the printer
    add r1 0 --> r3 // moves r1 input to r3 because division puts output into r1
    
    Body: 
    val 10 --> r2 // printing in base 10
    
    div r3 r2 --> r3 // r3 is the remaining, r1 is the print character 

    add r1 53 --> r1 // 52 is offset, converting between "number" and "text"

    mov r1 --> [2000] // spot to spill data to before calling WriteChar
    mov r2 --> [2002]  
    mov r3 --> [2004]

    mov [1998] --> r2 // writechar doesn't use r2
    mov [2010] --> r3 // moves cursor to r3


    call WriteChar // prints backwards
    add r3 -4 --> r3
    mov r3 --> [2010]
    mov [2000] --> r1
    mov [2002] --> r2
    mov [2004] --> r3

    jmp.if Body r3 
}

//subroutine
CountDigits:
{
    val 0 --> r2
    mov r2 --> [1998]
    // 1998 is the digit count
    // val 2010 --> r3
    add r1 0 --> r3 // moves r1 input to r3 because division puts output into r1
    
    CountDigitsBody: 
    val 10 --> r2 // counting in base 10
    
    div r3 r2 --> r3 // r3 is the remaining, r1 is the print character 

    mov [1998] --> r1
    add r1 1 --> r1
    mov r1 --> [1998]

    jmp.if CountDigitsBody r3 
    mov [1998] --> r1
    add r1 r1 --> r1
    mov r1 --> [1998]
}